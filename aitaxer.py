import numpy as np
import pandas as pd
import streamlit as st
import time
import plotly.express as px
#import matplotlib.pyplot as plt
import graph_plot
from PIL import Image

image_title = Image.open('H:\\Pythonprojects\\aitax\\venv\\images\\picture_title.jpg')
image_pipe  = Image.open('H:\\Pythonprojects\\aitax\\venv\\images\\pipeline_aitax.png')
image_world = Image.open('H:\\Pythonprojects\\aitax\\venv\\images\\picture_world.jpg')
image_envir = Image.open('H:\\Pythonprojects\\aitax\\venv\\images\\picture_env.jpg')
image_bot   = Image.open('H:\\Pythonprojects\\aitax\\venv\\images\\picture_bot.jpg')
# Pie chart, where the slices will be ordered and plotted counter-clockwise:
st.header('Искусственный Интеллект для рсчета налоговых отчислений.')
st.image(image_title)

with st.sidebar:
    st.markdown(''' # Содержание:''')
    st.markdown("## [1. Актуальность тематики](#about)", unsafe_allow_html=True)
    st.markdown("## [2. Этапы разработки кейса](#pipeline)", unsafe_allow_html=True)
    st.markdown("## [3. Задача](#task)", unsafe_allow_html=True)
    st.markdown("## [4. Информация о среде](#environment)", unsafe_allow_html=True)
    st.markdown("## [5. Информация о ботах](#bot)", unsafe_allow_html=True)
    st.markdown("## [6. Информация о боте-регуляторе](#planner)", unsafe_allow_html=True)
    st.markdown("## [7. Модель Свободный рынок](#free)", unsafe_allow_html=True)
    st.markdown("## [8. Модель Федеральная налоговая служба США](#usa)", unsafe_allow_html=True)
    st.markdown("## [9. Модель Формула Саеза](#saez)", unsafe_allow_html=True)
    st.markdown("## [10. Модель AI-регулятор](#airegular)", unsafe_allow_html=True)
    st.markdown("## [11. Выводы](#finally)", unsafe_allow_html=True)

st.header('Актуальность тематики', anchor='about')
st.subheader('Кому будет полезно изучить данную работу ?')
st.write('1.Студентам управленческих специальностей. Интересующимся функционированием государственных механизмов.')
st.write('2.Студентам финансовых специальносетй. Заинтересованным в изучении финансовых потоков.')
st.write('3.Студентам других специальностей, интересующимся новыми возможностями искусственного интеллекта.')

st.header('Этапы разработки кейса', anchor='pipeline')
st.image(image_pipe,caption='Этапы проектирования кейса')
with st.expander("Общая схема"):
    st.markdown(
        '''
        \n**Этапы:**
        \n1. Создаётся среда обитания ботов:
        \nФормируется матрица размером 25х25 ячеек(элементов). В каждой ячейке хранится число 0,1,2 или 10.
        \nЗначение этих чисел рассматривается ниже. 
        \n2. Создается бот-агент:
        \nВ данном пункте создается целый набор ботов (4 штуки). Каждый бот это нейронная сеть, собранная по типовой архитектуре. Данная архитектура прописана с помощью класса и является неизменной. За исключением параметра эффективности, который отвечает за "жадность" ботов.
        \n3. Обучение бота:
        \nВ процессе работы боты взаимодействуют со средой и друг с другом. Наращивают собственное благосостояние и эффективность.
        \n4. Боты создают данные о своих доходах и режиме работы:
        \nУ ботов имеется всего три режима работы: Движение, Работа, Торговля. Выбор одного из режимов определяет сам бот (точнее его нейросеть). Каждый свой шаг бот записывает и создает подробный отчет о своих действиях, который отсылается боту-регулятору.
        \n5. Бот-регулятор анализирует доходы ботов и высылает им налоговые уведомления:
        \nНа этом этапе бот-регулятор просматривает те данные, которые ему прислали боты (доходы за все время своей работы). На основании проведенных исследований бот-регулятор выносит вердикт, кто какой налог должн заплатить. В нашей работе бот-регулятор будет соревноваться с тремя системами учета налоговых отчислений: Свободный рынок, [Федеральная система США](https://www.nerdwallet.com/article/taxes/federal-income-tax-brackets), [Формула Саеза](https://wikicsu.ru/wiki/Optimal_labor_income_taxation).
        \nВ зависимости от того насколько равномерно распределится благосостояние в системе, будем считать систему эффективной или не очень.
        \n6. Поведение бота-агента корректируется с целью максимизации собственной выгоды:
        \nВ зависимости от того какой требуется заплатить налог боты-агенты корректируют свое поведение. При этом стараясь максимизировать собственную прибыль и в то же время заплатить минимум в дальейшем.
        \n7. Отображаем графики благосостояния ботов:
        \nПосле того как боты пройдут определенный временной участок выводятся данные об их благосостоянии, обучении, действиям и другие параметры, которые дают нам возможность судить о корректности работы всей математической модели уплаты налогов.
        ''')
#________________________Задача______________________________
st.header('Задача',anchor='task')
st.write('Одним из основных источников доходов любого государства являются налоги. Расчет налоговых отчислений является сложной оптимизационной задачей при которой '
         'нужно соблюдать два основных момента. Первый - не разорить предприятие облагаемое налогом. Второй - эффективно наполнить бюджет.')
st.write('Попробуем смоделировать функционирование некоторого гипотетического "государства" , в котором существует несколько ботов(фирм), '
         'а также планировщик налоговых отчислений (бот-регулятор). Предположим что данное государство существует на квадратном поле размером 25х25 клеток.')

st.image(image_world, caption='Здесь показана среда взаимодействия ботов. Отчетливо видны границы, условно разделяющие все поле на четыре квадрата.'
                              'Границы не сплошные. У ботов есть возможность заходить в соседние квадраты.')

st.write('Мы познакомимся с четырьмя вариантами расчета налоговых отчислений:')
st.write('* 1) Свободный рынок [Free market](https://postnauka.ru/faq/72340).')
st.write('* 2) Налоговая шкала федеральной системы США. [US Federal](https://www.nerdwallet.com/article/taxes/federal-income-tax-brackets)')
st.write('* 3) Методика Эммануэля Саеза [Emmanual Saez](https://eml.berkeley.edu/~saez/Saez_photopage_8_1.html).')
st.write('* 4) AI-налоговик [AI-taxer](https://disk.yandex.ru/i/1tCiQF9JwAThxg).')
st.write('А теперь каждый вариант рассмотрим по порядку.')
#_________________________Информация о среде___________________________________
st.header('Информация о среде',anchor='environment')
st.write('Среда в которой обитают боты представляет из себя квадратное поле размером 25х25 элементов. Боты могут перемещаться по данному полю, собирать ресурсы (камень,дерево), строить дома и получать за них прибыль, а также торговать между собой ресурсами.')
st.write('Ресурсы случайным образом возникают на территории всего поля. При этом число 1, находящееся в одном из элементов поля 25х25 означает, что в данной ячейке есть ресурс - дерево. Число 2 - камень. Число 10 говорит о том что на эту клетку вставать нельзя. Число 0 - пустая клетка. Бот может встать на клетку с 1 или 2 и тогда ему присуждается 1 единица соответствующего ресурса.')
st.image(image_envir,caption='Математическое отображение среды. Клетки с 0 - свободные. По ним боты могут перемещаться. Клетки с 1 или 2 содержат ресурс, дерево или камень соответственно. Их боты могут собирать и обменивать. Клетки с 10 - вода. Боты не могут по ним перемещаться.')
#_________________________Инфомация о ботах____________________________________
st.header('Информация о ботах',anchor='bot')
st.write('Каждый бот представляет из себя нейронную сеть и длинный архив записей собственной деятельности. В архиве отображаются все перемещения, торговые взаимодействия и накопление ресурсов и благосостояния бота. Эти накопления просматриваются ботом-регулятором и на основании этих данных он выносит ботам налоговые уведомления.')
st.write('Нейронная сеть бота состоит из нескольких слоев разного типа.')
st.image(image_bot,caption='Нейронная сеть бота. Она состоит из сверточных слоев (CNN), полносвязных слоев (MLP), а также слоев долговременной памяти (LSTM).')
st.write('На входе она имеет сверточные слои (CNN - [Convolutional Neural Network](https://python-school.ru/wiki/convolutional-neural-network/)). На них подается матрица нашей среды 25х25 клеток. В середине содержатся полносвязные слои (MLP - [MultiLayer Perceptron](https://wiki.loginom.ru/articles/multilayered-perceptron.html)). В эти слои помещаются данные логов и уведомления от бота-регулятора.')
st.write('Далее идут слои так называемой Долго-Краткосрочной памяти [LSTM](https://neurohive.io/ru/osnovy-data-science/lstm-nejronnaja-set/). Они позволяют боту "запоминать" свои предыдущие состояния и на их основании строить дальнейшую стратегию поведения.')
st.write('На выходе стоит один полносвязный слой. Он имеет три нейрона, которые выдают вероятностное значение какого-либо действия бота: Двигаться, Работать(собирать/строить), Торговать.')
st.write('Когда бот выбирает режим "Работать - строить" и если у него есть при этом 1 единица дерева и 1 единица камня, на месте бота создается "дом" , а создавшему его боту присуждается N-ое количество монет назначаемое средой. Количество монет зависит от уровня эффективности (жадности) бота.')
#_________________________Информация о боте-регуляторе_________________________
st.header('Информация о боте-регуляторе',anchor='planner')
st.write('По своей структуре бот-регулятор идентичен обычному боту агенту. Только на выходе он формирует налоговые уведомления для каждого бота.')
st.write('')

#_________________________Модель Свободный рынок_____________________________
st.header('Модель "Свободный рынок" (Free market) ',anchor='free')
st.write('Данная модель характеризуется тем, что налога здесь как такового нет. Боты получают вознаграждение от среды и просто его накапливают. С течением времени наиболее эффективный бот создает наибольший рост собственного благосостояния, а остальные боты перестают активно участвовать в экономике.')
#########Запуск симуляции#######
number1 = 50
col11,col12,col13,col14 = st.columns(4)
with col11:
    ef1 = st.slider('Эффективность 1 бота',0,100,25)
with col12:
    ef2 = st.slider('Эффективность 2 бота',0,100,10)
with col13:
    ef3 = st.slider('Эффективность 3 бота',0,100,5)
with col14:
    ef4 = st.slider('Эффективность 4 бота',0,100,1)
but_start = st.button('Запустить симуляцию')
placeholder = st.empty()
if but_start:
    bot1 = [ef1, 10]
    bot2 = [ef2, 10]
    bot3 = [ef3, 10]
    bot4 = [ef4, 10]
    #placeholder = st.empty()

    data_line = pd.DataFrame({'iter': 0, '1 Бот':10,'2 Бот':10,'Бот 3':10,'Бот 4':10},index=[0])

    for i in range(number1):
        with placeholder.container():
            col1, col2, col3 = st.columns(3)
            with col1:
                graph_plot.graph_pie(bot1[1], bot2[1], bot3[1], bot4[1])
            with col2:
                summar1 = bot1[1] + bot2[1] + bot3[1] + bot4[1]
                dolii = [bot1[1]*100/summar1,bot2[1]*100/summar1,bot3[1]*100/summar1,bot4[1]*100/summar1]
                data_all = pd.DataFrame({'№': [1, 2, 3, 4], 'Выручка': [bot1[1], bot2[1], bot3[1], bot4[1]], 'Доля,%':[dolii[0],dolii[1],dolii[2],dolii[3]]})
                st.write(data_all)
            with col3:
                st.write('Рост благосостояния ботов.')
                data_curr = pd.DataFrame({'iter':i,'1 Бот':bot1[1],'2 Бот':bot2[1],'Бот 3':bot3[1],'Бот 4':bot4[1]},index=[0])
                data_line = pd.concat([data_line,data_curr])
                data_line.to_csv('saved_data.csv',index=False)
                read_datas = pd.read_csv('saved_data.csv')
                st.line_chart(read_datas)
        bot1[1] += bot1[0]
        bot2[1] += bot2[0]
        bot3[1] += bot3[0]
        bot4[1] += bot4[0]
        #placeholder.empty()
st.write('Как видим, наиболее эффективный бот быстро наращивает свое благосостояние и в итоге остается практически один на рынке.')
st.write('Похожая ситуация в реальной жизни опасна тем, что она формирует монополию. И при этом рынок теряет большую часть агентов, а монополист начинает диктовать клиентам условия выгодные ему. '
         'Поскольку любая фирма (ООО или ОАО) имеет в уставных документах пункт о том, что целью ее создания является извлечение прибыли по другому она не в состоянии действовать.')
#st.image(image_free1, caption='Доли благосостояния ботов в общей модели экономики. Отчетливо видно, что один (наиболее эффективный) бот аккумулирует большую часть всего благосостояния.')

#_________________________Модель Федеральная налоговая служба США____________
st.header('Модель "Федеральная налоговая служба США" (Federal USA)', anchor='usa')
st.write('В данной модели расчета налога имеется прогрессивная шкала начисления налога в зависимости от доходности бота.')
st.write('Имеется несколько уровней: 10%, 12%, 22%, 24%, 32%, 35% and 37%. Каждый уровень отчислений соответствует определенной градации дохода. Которые в свою очередь имеют такие значения:'
         '0 - 9,950 $;'
         '9,951 - 40,525 $;'
         '40,526 - 86,375 $;'
         '86,376 - 164,925 $;'
         '164,926 - 209,425 $;'
         '209,426 - 523,600 $;'
         '523,601 $ + ')
st.write('Здесь указаны довольно условные границы. Более точные данные можно посмотреть на этом [сайте](https://www.nerdwallet.com/article/taxes/federal-income-tax-brackets). В данной системе несколько шкал, но в нашей системе будем рассматривать только одну.')
st.write('Например, налог в 10% взымается с лиц имеющих доход 0 - 9,950$ в год. Немного изменим границы для наших ботов, чтобы было проще считать. Пусть доход бота от 0 до 99,5 условных монет будет облагаться налогом 10%.')
#########Запуск симуляции#######
number1 = 50
col11,col12,col13,col14 = st.columns(4)
with col11:
    ef1 = st.slider('Эффективность 1 бота',0,100,25)
with col12:
    ef2 = st.slider('Эффективность 2 бота',0,100,10)
with col13:
    ef3 = st.slider('Эффективность 3 бота',0,100,5)
with col14:
    ef4 = st.slider('Эффективность 4 бота',0,100,1)
but_start = st.button('Запустить симуляцию')
placeholder = st.empty()
if but_start:
    bot1 = [ef1, 10]
    bot2 = [ef2, 10]
    bot3 = [ef3, 10]
    bot4 = [ef4, 10]
    #placeholder = st.empty()

    data_line = pd.DataFrame({'iter': 0, '1 Бот':10,'2 Бот':10,'Бот 3':10,'Бот 4':10},index=[0])

    for i in range(number1):
        with placeholder.container():
            col1, col2, col3 = st.columns(3)
            with col1:
                graph_plot.graph_pie(bot1[1], bot2[1], bot3[1], bot4[1])
            with col2:
                summar1 = bot1[1] + bot2[1] + bot3[1] + bot4[1]
                dolii = [bot1[1]*100/summar1,bot2[1]*100/summar1,bot3[1]*100/summar1,bot4[1]*100/summar1]
                data_all = pd.DataFrame({'№': [1, 2, 3, 4], 'Выручка': [bot1[1], bot2[1], bot3[1], bot4[1]], 'Доля,%':[dolii[0],dolii[1],dolii[2],dolii[3]]})
                st.write(data_all)
            with col3:
                st.write('Рост благосостояния ботов.')
                data_curr = pd.DataFrame({'iter':i,'1 Бот':bot1[1],'2 Бот':bot2[1],'Бот 3':bot3[1],'Бот 4':bot4[1]},index=[0])
                data_line = pd.concat([data_line,data_curr])
                data_line.to_csv('saved_data.csv',index=False)
                read_datas = pd.read_csv('saved_data.csv')
                st.line_chart(read_datas)
        bot1[1] += bot1[0]
        bot2[1] += bot2[0]
        bot3[1] += bot3[0]
        bot4[1] += bot4[0]
#_________________________Модель Формула Саеза_______________________________
st.header('Модель Эммануэля Саеза (Emmanuel Saez)', anchor='saez')

#_________________________Модель AI-регулятор________________________________
st.header('Модель AI-регулятор', anchor='airegular')


#_________________________Выводы____________________________________________
st.header('Выводы', anchor='finally')



st.sidebar.subheader('Эффективность ботов')
ef1 = st.slider('Агент 1',1,10,5,step=1)
ef2 = st.slider('Агент 2',1,10,3,step=1)
ef3 = st.slider('Агент 3',1,10,2,step=1)
ef4 = st.slider('Агент 4',1,10,1,step=1)

with st.expander('Автоматический расчет налоговых отчислений'):
    st.write('В данной программе представлено несколько примеров расчета налоговых отчислений для'
             'некоторого количества фирм(агентов). Рассматрено четыре метода расчета налогов.')

st.write('Эммануэль Саез - французский и американский экономист, специалист по налоговой политике и неравенству. '
             'Доктор философии, профессор Калифорнийского университета в Беркли и директор его центра Center for Equitable Growth.')
but_start = st.button('Расчет')

formula1 = st.radio('Каким образом расчитывается налог?', ('Свободный рынок','Налог согласно US Federal','Формула Эммануэля Саеза','AI tax планировщик'))

number1 = st.number_input('Количество итераций',1,20,3,step=1)

my_bar = st.progress(0)

bot1 = [ef1,0]
bot2 = [ef2,0]
bot3 = [ef3,0]
bot4 = [ef4,0]

if but_start:
        st.header('Налог расчитывается как')
        st.subheader(formula1)
        iternum = 0
        st.write('итерация номер:', iternum)
        if formula1 == 'Свободный рынок':
                placeholder = st.empty()
                for percent_complete in range(number1):
                        #time.sleep(0.1)
                        iternum +=1
                        my_bar.progress(percent_complete + 1)
                        bot1[1] = bot1[1] + bot1[0]
                        bot2[1] = bot2[1] + bot2[0]
                        bot3[1] = bot3[1] + bot3[0]
                        bot4[1] = bot4[1] + bot4[0]
                        with placeholder.container():
                                graph_plot.graph_pie(bot1[1], bot2[1], bot3[1], bot4[1])
                                st.write(pd.DataFrame({'Агент №': [1, 2, 3, 4],'Выручка': [bot1[1], bot2[1], bot3[1], bot4[1]], }))


        elif formula1 == 'AI tax планировщик':
                for percent_complete in range(number1):
                        #time.sleep(0.1)
                        st.write('итерация номер:',percent_complete)
                        my_bar.progress(percent_complete + 1)
                        bot1[1] = bot1[1] + bot1[0]
                        bot2[1] = bot2[1] + bot2[0]
                        bot3[1] = bot3[1] + bot3[0]
                        bot4[1] = bot4[1] + bot4[0]
